// Generated by view binder compiler. Do not edit!
package com.example.second_project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.second_project.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemTransactionBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView categoryIcon;

  @NonNull
  public final LinearLayout lectureInfo;

  @NonNull
  public final TextView transactionLectureData;

  @NonNull
  public final TextView transactionLecturePrice;

  @NonNull
  public final TextView transactionLectureTitle;

  private ItemTransactionBinding(@NonNull ConstraintLayout rootView,
      @NonNull ImageView categoryIcon, @NonNull LinearLayout lectureInfo,
      @NonNull TextView transactionLectureData, @NonNull TextView transactionLecturePrice,
      @NonNull TextView transactionLectureTitle) {
    this.rootView = rootView;
    this.categoryIcon = categoryIcon;
    this.lectureInfo = lectureInfo;
    this.transactionLectureData = transactionLectureData;
    this.transactionLecturePrice = transactionLecturePrice;
    this.transactionLectureTitle = transactionLectureTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTransactionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemTransactionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_transaction, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemTransactionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.categoryIcon;
      ImageView categoryIcon = ViewBindings.findChildViewById(rootView, id);
      if (categoryIcon == null) {
        break missingId;
      }

      id = R.id.lectureInfo;
      LinearLayout lectureInfo = ViewBindings.findChildViewById(rootView, id);
      if (lectureInfo == null) {
        break missingId;
      }

      id = R.id.transactionLectureData;
      TextView transactionLectureData = ViewBindings.findChildViewById(rootView, id);
      if (transactionLectureData == null) {
        break missingId;
      }

      id = R.id.transactionLecturePrice;
      TextView transactionLecturePrice = ViewBindings.findChildViewById(rootView, id);
      if (transactionLecturePrice == null) {
        break missingId;
      }

      id = R.id.transactionLectureTitle;
      TextView transactionLectureTitle = ViewBindings.findChildViewById(rootView, id);
      if (transactionLectureTitle == null) {
        break missingId;
      }

      return new ItemTransactionBinding((ConstraintLayout) rootView, categoryIcon, lectureInfo,
          transactionLectureData, transactionLecturePrice, transactionLectureTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
